######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.0475
	## PETG
	#{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
	#	SET_PRESSURE_ADVANCE ADVANCE=
	# PLA
	{% elif printer.heater_bed.target <= 65 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.035
	# Catch-all
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.0475
	{% endif %}

######################### PRINT START / END #########################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:		
	# Parameters
	{% set bed = params.BED|int %}
	{% set hotend = params.EXTRUDER|int %}
	{% set chamber = params.CHAMBER|default(0)|int %}
	{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

	# Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}	
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend}	
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}	
	
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0
    light_on
    RESETSPEEDS
	
    STATUS_HEATING
    M104 S140
    M140 S{bed}
    
    STATUS_HOMING
    G28
    light_on S=50
    PARKCENTER
	{% if printer["temperature_sensor chamber"].temperature < chamber %}
		HEATSOAK T={bed} MOVE=1
		M190 S{bed}
		TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}
	{% else %}
		{% if printer.heater_bed.temperature < (bed-2) %}
			HEATSOAK T={bed} MOVE=1
			M190 S{bed}
		{% else %}
			HEATSOAK T={bed} MOVE=0
		{% endif %}
	{% endif %}	
    M106 S0

    STATUS_CLEANING
    CLEANNOZZLE

    STATUS_LEVELING
    BED_MESH_CLEAR
    Attach_Probe_Lock
    QUAD_GANTRY_LEVEL
    G28 Z

    STATUS_MESHING
    ADAPTIVE_BED_MESH SIZE={FL_SIZE}
    G28 Z
    Dock_Probe_Unlock
    PARKBUCKET

    STATUS_HEATING
    M109 S{hotend}

    STATUS_CLEANING
    CLEANNOZZLE
    TEMPADJUSTPA
	
    STATUS_CALIBRATING_Z
    CALIBRATE_Z

    STATUS_PRINTING
    light_on S=30
    PARKBUCKET

[gcode_macro PRINT_END]
gcode:
    CLEAR_PAUSE
    M400
    G92 E0
    G1 E-15.0 F3600                ; park filament
    M104 S0
    M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}
    M107
    G91
    G1 Z5 F3000
    PARKBUCKET
    ERCF_EJECT
    BED_MESH_CLEAR								
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800
    RESETSPEEDS

[delayed_gcode DELAYED_OFF]
gcode:
	OFF

###################### 	Nozzle clean  ######################
#    use nozzle_clean to clean nozzle
#    must change to work for your brush loc
[gcode_macro CLEANNOZZLE]
gcode:
	# Parameters
	# Iterations
	{% set i = params.I|default(5)|int %}
	# Speed
	{% set s = params.S|default(200)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=CLEANNOZZLE
	G90																; absolute positioning
	G0 X185 Z10 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
	G0 Z1 F19500													; move down to nozzle brush
	{% for iteration in range(i|int) %}
		G0 X115 F{s*60}												; wipe back
		G0 X185	F{s*60}												; wipe forth
	{% endfor %}
	G0 X115 F{s*60}													; wipe back
	G0 Z10 F19500													; raise
	RESTORE_GCODE_STATE NAME=CLEANNOZZLE

[gcode_macro SWIPENOZZLE]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
	G0 X185 Z10 Y{printer.toolhead.axis_maximum.y} F19500 			; move to right of nozzle brush
	G0 Z1 F19500													; lower
	G0 X115 F2400													; wipe back
	G0 Z10	F19500													; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE

######################### CONFIG BACKUP #########################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
	
[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/scripts/git_backup.sh
timeout: 30.
verbose: True
	
######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
    light_on S=80
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E90 F600
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT

######################### CONDITIONAL HOMING #########################

[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		STATUS_HOMING
		G28
		STATUS_OFF
	{% endif %}
	
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR

    STATUS_CLEANING
    CLEANNOZZLE

    STATUS_LEVELING
    QUAD_GANTRY_LEVEL

    STATUS_CLEANING
    CLEANNOZZLE

    STATUS_CALIBRATING_Z
    CALIBRATE_Z

    PARKCENTER
    STATUS_READY
	
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
[gcode_macro PARKBUCKET]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=PARKBUCKET
	G90
	G0 X185 Y{printer.toolhead.axis_maximum.y} F19500
	RESTORE_GCODE_STATE NAME=PARKBUCKET

[gcode_macro MOTORS_OFF]
description: Turns all motors off
gcode:
  M18	
	
######################### ALIASES/SHORTCUTS #########################

[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
  M84												; turn steppers off
  TURN_OFF_HEATERS								; turn bed / hotend off
  M107                         	   			 	; turn print cooling fan off
  light_off
  STATUS_OFF

[gcode_macro MESH_LOAD]
gcode:
    BED_MESH_PROFILE LOAD=default
    
[gcode_macro PRINT_START_TOOLHEAD_SENSOR]
gcode:
    {% if printer["filament_switch_sensor toolhead_sensor"].enabled and not printer["filament_switch_sensor toolhead_sensor"].filament_detected %}
      M117 No filament detected
      PAUSE
    {% endif %}

# ignore m150 commands
[gcode_macro M150]
gcode:

[gcode_macro M191]
gcode:
    {% set S = params.S|default(0) %}
    {% set R = params.R|default(120) %}
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={S} MAXIMUM={R}

######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z